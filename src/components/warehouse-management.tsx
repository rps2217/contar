
"use client";

import React, { useState, useCallback, useId } from 'react';
import type { Warehouse } from '@/types/product';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { EditWarehouseDialog } from '@/components/edit-warehouse-dialog'; // New dialog component
import { Trash, Edit, Plus, CheckCircle, Building } from "lucide-react";
import { cn } from "@/lib/utils";
import { DEFAULT_WAREHOUSE_ID } from '@/lib/constants';

interface WarehouseManagementProps {
  warehouses: Warehouse[];
  currentWarehouseId: string;
  onAddWarehouse: (name: string) => void; // Only name is needed, ID will be generated by parent
  onUpdateWarehouse: (warehouse: Warehouse) => void;
  onDeleteWarehouse: (warehouseId: string) => void;
  onSelectWarehouse: (warehouseId: string) => void;
  isLoading: boolean;
}

export const WarehouseManagement: React.FC<WarehouseManagementProps> = ({
  warehouses,
  currentWarehouseId,
  onAddWarehouse,
  onUpdateWarehouse,
  onDeleteWarehouse,
  onSelectWarehouse,
  isLoading,
}) => {
  const [newWarehouseName, setNewWarehouseName] = useState("");
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [warehouseToDelete, setWarehouseToDelete] = useState<Warehouse | null>(null);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [warehouseToEdit, setWarehouseToEdit] = useState<Warehouse | null>(null);

  const deleteDialogDescriptionId = useId();

  const handleAddNewWarehouse = () => {
    if (!newWarehouseName.trim()) {
      // Toast or validation message can be handled by the parent or here
      alert("El nombre del almacén no puede estar vacío.");
      return;
    }
    onAddWarehouse(newWarehouseName.trim());
    setNewWarehouseName("");
  };

  const handleDeleteRequest = useCallback((warehouse: Warehouse) => {
    if (warehouse.id === DEFAULT_WAREHOUSE_ID) {
      alert("No se puede eliminar el Almacén Principal.");
      return;
    }
    setWarehouseToDelete(warehouse);
    setIsDeleteDialogOpen(true);
  }, []);

  const confirmDelete = () => {
    if (warehouseToDelete) {
      onDeleteWarehouse(warehouseToDelete.id);
    }
    setIsDeleteDialogOpen(false);
    setWarehouseToDelete(null);
  };

  const handleOpenEditDialog = useCallback((warehouse: Warehouse) => {
    setWarehouseToEdit(warehouse);
    setIsEditDialogOpen(true);
  }, []);

  const handleSaveEdit = (updatedWarehouse: Warehouse) => {
    onUpdateWarehouse(updatedWarehouse);
    setIsEditDialogOpen(false);
    setWarehouseToEdit(null);
  };

  return (
    <div className="p-4 md:p-6 space-y-8">
      <div>
        <h2 className="text-2xl font-bold tracking-tight">Administración de Almacenes</h2>
        <p className="text-muted-foreground">
          Crea, edita, elimina y selecciona tus almacenes. El ID se genera automáticamente para los nuevos.
        </p>
      </div>

      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle>Agregar Nuevo Almacén</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div>
            <Label htmlFor="new-warehouse-name" className="text-sm font-medium">Nombre del Nuevo Almacén</Label>
            <Input
              id="new-warehouse-name"
              type="text"
              placeholder="Ej: Sucursal Centro, Bodega Secundaria"
              value={newWarehouseName}
              onChange={(e) => setNewWarehouseName(e.target.value)}
              className="mt-1"
              aria-label="Nombre del nuevo almacén"
            />
          </div>
        </CardContent>
        <CardFooter>
          <Button onClick={handleAddNewWarehouse} disabled={isLoading || !newWarehouseName.trim()}>
            <Plus className="mr-2 h-4 w-4" />
            Agregar Almacén
          </Button>
        </CardFooter>
      </Card>

      <div>
        <h3 className="text-xl font-semibold mb-4">Almacenes Existentes</h3>
        {isLoading && <p className="text-muted-foreground">Cargando almacenes...</p>}
        {!isLoading && warehouses.length === 0 && (
          <p className="text-muted-foreground">No hay almacenes definidos. Agrega uno para comenzar.</p>
        )}
        {!isLoading && warehouses.length > 0 && (
          <ScrollArea className="h-[400px] pr-4">
            <div className="space-y-4">
              {warehouses.map((warehouse) => (
                <Card key={warehouse.id} className={cn("shadow-md hover:shadow-lg transition-shadow", warehouse.id === currentWarehouseId && "border-primary ring-2 ring-primary")}>
                  <CardHeader className="pb-3">
                    <div className="flex justify-between items-start">
                      <CardTitle className="text-lg flex items-center">
                        <Building className="mr-2 h-5 w-5 text-muted-foreground" />
                        {warehouse.name}
                      </CardTitle>
                      {warehouse.id === currentWarehouseId && (
                        <span className="text-xs bg-green-100 text-green-700 font-semibold px-2 py-0.5 rounded-full dark:bg-green-800 dark:text-green-200">
                          Activo
                        </span>
                      )}
                    </div>
                    <CardDescription className="text-xs text-muted-foreground pt-1">ID: {warehouse.id}</CardDescription>
                  </CardHeader>
                  <CardFooter className="flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-2 pt-0">
                    <Button
                      variant={warehouse.id === currentWarehouseId ? "default" : "outline"}
                      size="sm"
                      onClick={() => onSelectWarehouse(warehouse.id)}
                      disabled={warehouse.id === currentWarehouseId}
                      className="w-full sm:w-auto"
                    >
                      {warehouse.id === currentWarehouseId ? <CheckCircle className="mr-2 h-4 w-4" /> : null}
                      {warehouse.id === currentWarehouseId ? "Activo" : "Seleccionar"}
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleOpenEditDialog(warehouse)}
                       className="w-full sm:w-auto"
                    >
                      <Edit className="mr-1 h-4 w-4" />
                      Editar Nombre
                    </Button>
                    {warehouse.id !== DEFAULT_WAREHOUSE_ID && (
                      <Button
                        variant="destructive"
                        outline
                        size="sm"
                        onClick={() => handleDeleteRequest(warehouse)}
                        className="w-full sm:w-auto"
                      >
                        <Trash className="mr-1 h-4 w-4" />
                        Eliminar
                      </Button>
                    )}
                  </CardFooter>
                </Card>
              ))}
            </div>
          </ScrollArea>
        )}
      </div>

      {warehouseToDelete && (
        <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
          <AlertDialogContent aria-describedby={deleteDialogDescriptionId}>
            <AlertDialogHeader>
              <AlertDialogTitle>Confirmar Eliminación</AlertDialogTitle>
              <AlertDialogDescription id={deleteDialogDescriptionId}>
                ¿Estás seguro de que deseas eliminar el almacén "{warehouseToDelete?.name}" (ID: {warehouseToDelete?.id})? Esta acción no se puede deshacer.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel onClick={() => setIsDeleteDialogOpen(false)}>Cancelar</AlertDialogCancel>
              <AlertDialogAction onClick={confirmDelete} className={cn("bg-destructive hover:bg-destructive/90")}>Eliminar</AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}

      {warehouseToEdit && (
        <EditWarehouseDialog
          isOpen={isEditDialogOpen}
          setIsOpen={setIsEditDialogOpen}
          warehouse={warehouseToEdit}
          onSave={handleSaveEdit}
        />
      )}
    </div>
  );
};

// Ensure the display name is set for React Developer Tools
WarehouseManagement.displayName = 'WarehouseManagement';
    